#!/usr/bin/env python

## Pointcloud detection parameters
# Parameters are listed in the order in which the corresponding
# operations are executed (except for deprecated parameters).

PACKAGE='difec_ron'
import roslib;
roslib.load_manifest(PACKAGE)

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator();

params_control = gen.add_group("Control parameters");
params_control.add("control__enabled", bool_t, 1, "whether the output of the controller should be published to the drone control pipeline (otherwise, it will only be printed)", False);
params_control.add("control__use_noise", bool_t, 1, "if true, DIFEC-RON will be used, otherwise raw DIFEC will be used", True);
params_control.add("control__repeat_commands", bool_t, 1, "whether to periodically repeat the velocity commands even if no detection was received", False);
params_control.add("control__admissible_overshoot_probability", double_t, 1, "probability of overshooting the setpoint pose has to be lower than this", 0.2, 0.0, 0.5);
params_control.add("control__proportional_constant", double_t, 1, "the control error is multiplied by this constant to obtain the control action", 0.5, 0.0, 1.0);

params_formation = gen.add_group("Formation parameters");
params_formation.add("formation__update", bool_t, 8, "You can use this to force update the formation e.g. when you change the current formation file instead of specifying a new file.", False);
params_formation.add("formation__filename", str_t, 8, "Name of the file used to specify the formation. Changing this value will cause the formation to be reloaded.", "");

params_constr = gen.add_group("Constraints");
params_constr.add("constraints__u", double_t, 1, "If the linear velocity is larger than this, it will be clamped ot this value.", 5.0, 0.0, 10.0);
params_constr.add("constraints__omega", double_t, 1, "If the angular velocity is larger than this, it will be clamped ot this value.", 1.5, 0.0, 10.0);

exit(gen.generate(PACKAGE, "difec_ron", "FormationControlParams"))
